#pragma once
#include <ATen/Config.h>
#include <c10/core/DeviceType.h>
#include <c10/core/ScalarType.h>
#include <c10/util/BFloat16.h>
#include <c10/util/Float8_e4m3fn.h>
#include <c10/util/Float8_e5m2.h>
#include <c10/util/Half.h>

// Defines the accumulation type for a scalar type.
// Example:
//   using accscalar_t = acc_type<scalar_t, /*is_cuda*/true>;
//
// Accumulation types are an important concept in numeric computing
// because you frequently want to perform intermediate computations
// at a higher precision than the input and output precision, to avoid
// compounding internal rounding errors.  Accumulation is the most
// well-known intermediate computation (it is of great importance for
// sum reduction and matrix multiply, for example), but in PyTorch
// acc_type ends up getting used for all sorts of other intermediate
// computations, so it perhaps would be more accurately (ahem) called an
// "accurate" type.  acc_type is especially important for reduced
// precision operations like float16 and bfloat16, where relatively
// benign looking inputs can easily end up overflowing/underflowing.
//
// acc_type is parametrized by whether or not you are running on CUDA
// or not, because on CUDA double precision operations are expensive
// and so by default, we don't actually want to use double as an
// acc_type on CUDA.  A lot of things are typed out below, but
// basically, the table is generated by a few rules:
//
//  If bool:
//      Use 'bool' as acc_type.
//  If floating point:
//      If CUDA, use 'float' as acc_type (unless scalar_t is double),
//      otherwise (CPU) use 'double'
//  If integral:
//      Use 'int64_t' as acc_type
//
// You're not forced to use this template; if you happen to know
// something specific about your use case, you can specify your own
// desired behavior.  This template, however, will give you a reasonable
// default that will work for all dtypes supported in PyTorch.

#if defined(__CUDACC__)
#include <cuda.h>
#include <cuda_fp16.h>
#elif defined(__HIPCC__)
#include <hip/hip_fp16.h>
#include <hip/hip_runtime.h>
#endif

namespace at {

template <typename T, c10::DeviceType D>
struct AccumulateTypeDevice {};

template <>
struct AccumulateTypeDevice<BFloat16, c10::DeviceType::MPS> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<Half, c10::DeviceType::MPS> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<Float8_e5m2, c10::DeviceType::MPS> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<Float8_e4m3fn, c10::DeviceType::MPS> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<float, c10::DeviceType::MPS> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<double, c10::DeviceType::MPS> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<int8_t, c10::DeviceType::MPS> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<uint8_t, c10::DeviceType::MPS> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<char, c10::DeviceType::MPS> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<int16_t, c10::DeviceType::MPS> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<int32_t, c10::DeviceType::MPS> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<int64_t, c10::DeviceType::MPS> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<bool, c10::DeviceType::MPS> {
  using type = bool;
};
template <>
struct AccumulateTypeDevice<c10::complex<Half>, c10::DeviceType::MPS> {
  using type = void;
};
template <>
struct AccumulateTypeDevice<c10::complex<float>, c10::DeviceType::MPS> {
  using type = void;
};
template <>
struct AccumulateTypeDevice<c10::complex<double>, c10::DeviceType::MPS> {
  using type = void;
};

#if defined(__CUDACC__) || defined(__HIPCC__)
template <>
struct AccumulateTypeDevice<half, c10::DeviceType::CUDA> {
  using type = float;
};
#endif
template <>
struct AccumulateTypeDevice<BFloat16, c10::DeviceType::CUDA> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<Half, c10::DeviceType::CUDA> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<Float8_e5m2, c10::DeviceType::CUDA> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<Float8_e4m3fn, c10::DeviceType::CUDA> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<float, c10::DeviceType::CUDA> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<double, c10::DeviceType::CUDA> {
  using type = double;
};
template <>
struct AccumulateTypeDevice<int8_t, c10::DeviceType::CUDA> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<uint8_t, c10::DeviceType::CUDA> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<char, c10::DeviceType::CUDA> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<int16_t, c10::DeviceType::CUDA> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<int32_t, c10::DeviceType::CUDA> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<int64_t, c10::DeviceType::CUDA> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<bool, c10::DeviceType::CUDA> {
  using type = bool;
};
template <>
struct AccumulateTypeDevice<Half, c10::DeviceType::CPU> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<BFloat16, c10::DeviceType::CPU> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<Float8_e5m2, c10::DeviceType::CPU> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<Float8_e4m3fn, c10::DeviceType::CPU> {
  using type = float;
};
template <>
struct AccumulateTypeDevice<c10::complex<Half>, c10::DeviceType::CPU> {
  using type = c10::complex<float>;
};
template <>
struct AccumulateTypeDevice<c10::complex<float>, c10::DeviceType::CPU> {
  using type = c10::complex<double>;
};
template <>
struct AccumulateTypeDevice<c10::complex<double>, c10::DeviceType::CPU> {
  using type = c10::complex<double>;
};
template <>
struct AccumulateTypeDevice<c10::complex<Half>, c10::DeviceType::CUDA> {
  using type = c10::complex<float>;
};
template <>
struct AccumulateTypeDevice<c10::complex<float>, c10::DeviceType::CUDA> {
  using type = c10::complex<float>;
};
template <>
struct AccumulateTypeDevice<c10::complex<double>, c10::DeviceType::CUDA> {
  using type = c10::complex<double>;
};
template <>
struct AccumulateTypeDevice<float, c10::DeviceType::CPU> {
  using type = double;
};
template <>
struct AccumulateTypeDevice<double, c10::DeviceType::CPU> {
  using type = double;
};
template <>
struct AccumulateTypeDevice<int8_t, c10::DeviceType::CPU> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<uint8_t, c10::DeviceType::CPU> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<char, c10::DeviceType::CPU> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<int16_t, c10::DeviceType::CPU> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<int32_t, c10::DeviceType::CPU> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<int64_t, c10::DeviceType::CPU> {
  using type = int64_t;
};
template <>
struct AccumulateTypeDevice<bool, c10::DeviceType::CPU> {
  using type = bool;
};

template <typename T, bool>
struct AccumulateType {};

template <typename T>
struct AccumulateType<T, false> {
  using type = typename AccumulateTypeDevice<T, c10::DeviceType::CPU>::type;
};

template <typename T>
struct AccumulateType<T, true> {
  using type = typename AccumulateTypeDevice<T, c10::DeviceType::CUDA>::type;
};

template <typename T, c10::DeviceType device>
using acc_type_device = typename AccumulateTypeDevice<T, device>::type;

template <typename T, bool is_cuda>
using acc_type = typename AccumulateType<T, is_cuda>::type;

TORCH_API c10::ScalarType toAccumulateType(
    c10::ScalarType type,
    c10::DeviceType device);
TORCH_API c10::ScalarType toAccumulateType(c10::ScalarType type, bool is_cuda);

} // namespace at
